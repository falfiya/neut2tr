# racket bnf
# this only encodes enough information to figure out if something's a comment
sourcefile ::=
   | <string>
   | <char-literal>
   | <comment-expr>
   | <comment-line>
   | <comment-block>
   | <...>

string ::= <quote> <string-char>* <quote>
string-char ::=
   | <escape> <utf8char>
   | <not <quote>>

# this is a racket character entry:
# (princ #\\)
# for instance.
# this bnf is not technically accurate because stuff like #\space exists for
# some reason.
# for our purposes the only two characters we care about are #\; and #\"
char-literal ::= "#" <escape> <regex ".">

# there's this cute construct where you can comment out an entire s-expression
# #;(this is commented out
#    even if it's on multiple lines!)
# more work for me!
comment-expr ::= "#;"
comment-line ::= ";" <lf>
# nested block comments are a thing!
comment-block ::= "#|" (<comment-block> | <...>) "|#"

quote ::= '"'
escape ::= '\\'
lf ::= "\n"
